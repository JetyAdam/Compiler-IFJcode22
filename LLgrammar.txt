PROG ::= PROLOG CODE
PROLOG ::= $START declare ( strict_types = 1 ) ;
CODE ::= CODE' CODE''
CODE ::= ''
CODE' ::= FUNC_DEF_DEC
CODE' ::= STMT ;
CODE' ::= IF
CODE' ::= WHILE
CODE' ::= RETURN_STMT ;
CODE'' ::= CODE' CODE''
CODE'' ::= ''
CODE'' ::= ENDPROLOG
BODY ::= BODY' BODY''
BODY ::= ''
BODY' ::= STMT ;
BODY' ::= e ;
BODY' ::= IF
BODY' ::= WHILE
BODY' ::= RETURN_STMT ;
BODY'' ::= BODY' BODY''
BODY'' ::= ''
STMT ::= FUNC_CALL
STMT ::= VAR_DEF_DEC
FUNC_DEF_DEC ::= $FUNCTION $FID ( PARAMS ) : TYPE { BODY }
FUNC_CALL ::= $FID ( TERM_SEQ )
PARAMS ::= PARAM PARAM'
PARAMS ::= ''
PARAM ::= TYPE $VAR
PARAM' ::= , PARAM PARAM'
PARAM' ::= ''
TYPE ::= ? TYPE'
TYPE ::= TYPE'
TYPE' ::= $VOID
TYPE' ::= $FLOAT
TYPE' ::= $STRING
TYPE' ::= $INT
RETURN_STMT ::= return RET_VAL
RET_VAL ::= ''
RET_VAL ::= EXPR
TERM ::= $VAR
TERM ::= $STR
TERM ::= $NUMBER
TERM ::= $INTEGER
TERM ::= $NULL
TERM_SEQ ::= ''
TERM_SEQ ::= TERM TERM_SEQ'
TERM_SEQ' ::= , TERM TERM_SEQ'
TERM_SEQ' ::= ''
VAR_DEF_DEC ::= $VAR = VAR_ASSIGN 
VAR_ASSIGN ::= CALL
VAR_ASSIGN ::= EXPR
IF ::= $IF ( EXPR ) { BODY } $ELSE { BODY }
WHILE ::= $WHILE ( EXPR ) { BODY }
EXPR ::= $EXPR
ENDPROLOG ::= $EOF